#! /usr/bin/env python

PACKAGE='hbrs_perception_tests'
import roslib; roslib.load_manifest(PACKAGE)

from dynamic_reconfigure.parameter_generator import *

gen = ParameterGenerator()

#        Name                             Type         Description                                   Default Min Max
gen.add("normal_max_depth_change_factor", double_t, 0, "Normal estimation max depth change factor",  0.02,   0,  0.1  )
gen.add("normal_smoothing_size",          double_t, 0, "Normal estimation smoothing size",           10.0,   0,  30.0 )
gen.add("min_inliers",                    int_t,    0, "Minimum inliers",                            1000,   0,  10000)
gen.add("angular_threshold",              double_t, 0, "Angular threshold (degrees)",                3.0,    0,  10   )
gen.add("distance_threshold",             double_t, 0, "Distance threshold",                         0.02,   0,  0.2  )
gen.add("maximum_curvature",              double_t, 0, "Maximum curvature",                          0.005,  0,  0.1  )
gen.add("refinement_threshold",           double_t, 0, "Refinement threshold",                       0.02,   0,  0.2  )
gen.add("refinement_depth_independent",   bool_t,   0, "Refinement depth independent",               True)

#        Name                              Type         Description                        Default Min   Max 
gen.add("apply_angular_constraints",       bool_t,   0, "Apply angular constraints",        False)
gen.add("constraint_angular_threshold",    double_t, 0, "Plane normal angular threshold",  20,     0,    90    )
gen.add("constraint_normal_x",             double_t, 0, "Plane normal x",                  0.1,    -1.0, 1.0   )
gen.add("constraint_normal_y",             double_t, 0, "Plane normal y",                  0.1,    -1.0, 1.0   )
gen.add("constraint_normal_z",             double_t, 0, "Plane normal z",                  0.1,    -1.0, 1.0   )
gen.add("apply_distance_constraints",      bool_t,   0, "Apply distance constraint",       False)
gen.add("constraint_distance_threshold",   double_t, 0, "Plane distance threshold",        0.05,   0,    1.0   )
gen.add("constraint_distance",             double_t, 0, "Plane distance",                  0.0,    -3.0, 3.0   )


exit(gen.generate(PACKAGE, "plane_extraction", "PlaneExtraction"))
