#!/usr/bin/env python
"""This script will call workspace finder service in an infinite loop. After
each workspace detection the user is asked to confirm that the output if
correct. If yes, the user should hit \"enter\" without typing anything. If no,
the user should type any character(s) and then hit \"enter\". To stop data
gathering and process it the user should type \"stop\".
"""

PACKAGE = 'hbrs_scene_segmentation'
NODE = 'calibrate_workspace_finder'

import roslib
roslib.load_manifest(PACKAGE)
import rospy
import textwrap
import numpy as np
import os

from hbrs_srvs.srv import FindWorkspace

SERVICE = '/find_workspace'
CONFIG = 'workspace_constraints.yaml'


if __name__ == '__main__':
    print ':: Workspace finder calibration ::'
    print ''
    print textwrap.fill(__doc__)
    print ''
    print 'Waiting for [%s] service...' % SERVICE
    rospy.wait_for_service(SERVICE)
    print 'Server is up, starting to gather data.'
    find_workspace = rospy.ServiceProxy(SERVICE, FindWorkspace)
    dataset = np.array([])
    while True:
        print '\nCalling [%s] service...' % SERVICE
        try:
            response = find_workspace()
            answer = raw_input('Workspace found. Add it to the dataset? ')
            if not answer:
                print 'Added', response.polygon.coefficients, 'to the dataset'
                dataset = np.append(dataset, response.polygon.coefficients)
            elif answer == 'stop':
                print 'Done with data gathering.'
                break
        except rospy.ServiceException:
            exit('Service call failed!')
    print ''
    dataset = np.reshape(dataset, (-1, 4))
    median = np.median(dataset, axis=0)
    std = np.std(dataset, axis=0)
    print 'Median ', median
    print 'Std    ', std
    print 'Writing constraints to file %s' % CONFIG
    config = open(CONFIG, 'w')
    config.write('# Plane constraints for workspace finder\n')
    config.write('# Generated by %s script\n' % os.path.basename(__file__))
    config.write('normal_x: %f\n' % median[0])
    config.write('normal_y: %f\n' % median[1])
    config.write('normal_z: %f\n' % median[2])
    config.write('distance: %f\n' % median[3])
    config.close()
    print ''
    print 'Done'
